-- phpMyAdmin SQL Dump
-- version 4.7.4
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3306
-- Generation Time: 2018-05-01 13:02:23
-- 服务器版本： 5.7.19
-- PHP Version: 7.1.9

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `lm`
--

-- --------------------------------------------------------

--
-- 表的结构 `articles`
--

DROP TABLE IF EXISTS `articles`;
CREATE TABLE IF NOT EXISTS `articles` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL COMMENT '用户id',
  `cate_id` int(11) DEFAULT NULL COMMENT '分类id',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `content` longtext,
  `thumb` varchar(255) DEFAULT NULL COMMENT '封面',
  `hits` int(10) DEFAULT '0' COMMENT '点击量',
  `is_index` int(2) NOT NULL DEFAULT '0' COMMENT '首页展示 1展示',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `articles`
--

INSERT INTO `articles` (`id`, `user_id`, `cate_id`, `name`, `content`, `thumb`, `hits`, `is_index`, `created_at`, `updated_at`) VALUES
(19, 27, 1, '第1个PHP1', '<p>233</p><p>2222222222222</p><p><br></p>', NULL, 13, 0, '2018-04-22 01:31:04', '2018-04-22 07:39:33'),
(20, 39, 2, '第2个PHP', '222', NULL, 15, 0, '2018-04-22 02:34:29', '2018-04-22 02:46:16'),
(21, 39, 1, '第3个PHP', '333', NULL, 37, 0, '2018-04-22 02:34:42', '2018-04-22 07:41:56'),
(18, 33, 1, '第4个PHP', '444', NULL, 82, 1, '2018-04-19 15:10:54', '2018-04-22 05:13:32'),
(22, 33, 1, '二傻子', '<h1 id=\"动机\">11</h1>', NULL, 0, 0, '2018-04-30 08:43:28', '2018-04-30 08:43:28'),
(23, 33, 1, '测试', '<p>1</p>', NULL, 2, 0, '2018-04-30 08:43:40', '2018-04-30 08:43:40'),
(24, 33, 2, '测试2', '<h1 id=\"动机\">动机</h1><p>五一临近，四月也接近尾声，五一节乃小长假的最后一天。今天是最后一天工作日，竟然感冒了，半夜里翻来覆去无法安睡，加上窗外大飞机屋里小飞机(也就是蚊子)的骚扰，实在是必须起来做点有意义的事了！</p><p>  忆起与人交流一个负载均衡问题时，偶然聊到了WRR算法，就必然要记下些什么，以表示曾经聊过这个话题，作此文以记之！</p><h1 id=\"简介\"><a name=\"t1\"></a>简介</h1><p>在负载均衡场景中，我们经常需要对一组服务器做加权轮询均衡调用，即适配一个叫做WRR(<u>Weighted Round-Robin Scheduling</u>)的算法。本文的主要内容就是分析常见的两种WRR算法，即Linux IPVS的WRR算法和Nginx的WRR算法，并试图做出二者的比较。</p><p>  当然了，负载均衡的算法非常多，但很难在一篇技术随笔中盖以全貌，与其说不透，不如干脆不说，因此本文的内容仅仅包含两种常见的WRR算法。</p><h1 id=\"linux内核ipvs使用的wrr算法\"><a name=\"t2\"></a>Linux内核IPVS使用的WRR算法</h1><p>这里接不介绍IPVS了，直接切入算法本身，详见<strong><em>net/netfilter/ipvs/ip_vs_wrr.c</em></strong>中的结构体：</p><pre name=\"code\"><code>static struct ip_vs_scheduler ip_vs_wrr_scheduler = {\n    .name =         \"wrr\",\n    .refcnt =       ATOMIC_INIT(0),\n    .module =       THIS_MODULE,\n    .n_list =       LIST_HEAD_INIT(ip_vs_wrr_scheduler.n_list),\n    .init_service =     ip_vs_wrr_init_svc,\n    .done_service =     ip_vs_wrr_done_svc,\n    .add_dest =     ip_vs_wrr_dest_changed,\n    .del_dest =     ip_vs_wrr_dest_changed,\n    .upd_dest =     ip_vs_wrr_dest_changed,\n    .schedule =     ip_vs_wrr_schedule,\n};</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul></pre><p>这里重点关注schedule 回调函数ip_vs_wrr_schedule。</p><p>  为了让事情更加直观，不至于陷入到Linux内核源码IPVS复杂业务逻辑的深渊，这里给出其Wiki上上的写法，摘自：<a href=\"http://kb.linuxvirtualserver.org/wiki/Weighted_Round-Robin_Scheduling\" target=\"_blank\">http://kb.linuxvirtualserver.org/wiki/Weighted_Round-Robin_Scheduling</a>：</p><pre name=\"code\"><code>Supposing that there is a server set S = {S0, S1, …, Sn-1};\nW(Si) indicates the weight of Si;\ni indicates the server selected last time, and i is initialized with -1;\ncw is the current weight in scheduling, and cw is initialized with zero; \nmax(S) is the maximum weight of all the servers in S;\ngcd(S) is the greatest common divisor of all server weights in S;\n\nwhile (true) {\n    i = (i + 1) mod n;\n    if (i == 0) {\n        cw = cw - gcd(S); \n        if (cw &lt;= 0) {\n            cw = max(S);\n            if (cw == 0)\n            return NULL;\n        }\n    } \n    if (W(Si) &gt;= cw) \n        return Si;\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li></ul></pre><p>如果你还是没有一个直观上的感受，下面是我写的一个简单的能run的程序，直接编译运行即可：</p><pre name=\"code\"><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct entry {\n        int weight;\n};\n\nstruct entry *g_entry = NULL;\nint max_weight = 0;\nint curr_weight = 0;\nint divisor = 0;\nint iter = -1;\n\n\nint gcd(int a, int b)  \n{  \n        if (a == 0) {\n                return b;\n        }\n        return gcd(b%a, a);  \n} \n\nstruct entry *next(int size) \n{\n\n        struct entry *ent;\n        while (1) {\n                iter = (iter + 1) % size;\n                if (iter == 0) {\n                        curr_weight = curr_weight - divisor; \n                        if (curr_weight &lt;= 0) {\n                                curr_weight = max_weight;\n                        }\n                } \n                ent = &amp;g_entry[iter];\n                if (ent-&gt;weight &gt;= curr_weight) {\n                        return ent;\n                }\n        }\n}\n\nint main(int argc, char **argv)\n{\n        int size = atoi(argv[1]);\n        int i = 0;\n        int total = 0;\n\n        g_entry = (struct entry *)calloc(size, sizeof(struct entry));\n        for (i = 0; i &lt; size; i++) {\n                struct entry *ent = &amp;g_entry[i];\n                ent-&gt;weight = atoi(argv[i+2]);\n                total += ent-&gt;weight;\n                if (ent-&gt;weight &gt; max_weight) {\n                        max_weight = ent-&gt;weight;\n                }\n                divisor = gcd(divisor, ent-&gt;weight);\n        }\n\n        for (i = 0; i &lt; total; i++) {\n                struct entry *ent = next(size);\n                printf(\"[LAST]: %d\\n\", ent-&gt;weight);\n        }\n\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li>49</li><li>50</li><li>51</li><li>52</li><li>53</li><li>54</li><li>55</li><li>56</li><li>57</li><li>58</li><li>59</li><li>60</li><li>61</li><li>62</li><li>63</li><li>64</li></ul></pre><p>你可以这样使用这个程序：</p><pre name=\"code\"><code># 这里生成一个3(第一个参数)个元素的集合，其权值分别为5,1,1(后面的参数)\n./a.out 3 5 1 1</code><ul><li>1</li><li>2</li></ul></pre><h2 id=\"简单的证明和分析\"><a name=\"t3\"></a>简单的证明和分析</h2><p>这个算法给出的结果总是正确的吗？回答这个问题我觉得非常简单直观，请看下图：&nbsp;<br><img src=\"https://img-blog.csdn.net/20180427080355811?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p><p>按照上图中的规则，取元素的顺序则是：</p><p><img src=\"https://img-blog.csdn.net/20180427080846876?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p><hr><p><br></p>', NULL, 13, 0, '2018-04-30 08:44:21', '2018-04-30 08:44:21');
INSERT INTO `articles` (`id`, `user_id`, `cate_id`, `name`, `content`, `thumb`, `hits`, `is_index`, `created_at`, `updated_at`) VALUES
(25, 33, 1, 'ces', '<h1 id=\"动机\">动机</h1><p>五一临近，四月也接近尾声，五一节乃小长假的最后一天。今天是最后一天工作日，竟然感冒了，半夜里翻来覆去无法安睡，加上窗外大飞机屋里小飞机(也就是蚊子)的骚扰，实在是必须起来做点有意义的事了！</p><p>  忆起与人交流一个负载均衡问题时，偶然聊到了WRR算法，就必然要记下些什么，以表示曾经聊过这个话题，作此文以记之！</p><h1 id=\"简介\"><a name=\"t1\"></a>简介</h1><p>在负载均衡场景中，我们经常需要对一组服务器做加权轮询均衡调用，即适配一个叫做WRR(<u>Weighted Round-Robin Scheduling</u>)的算法。本文的主要内容就是分析常见的两种WRR算法，即Linux IPVS的WRR算法和Nginx的WRR算法，并试图做出二者的比较。</p><p>  当然了，负载均衡的算法非常多，但很难在一篇技术随笔中盖以全貌，与其说不透，不如干脆不说，因此本文的内容仅仅包含两种常见的WRR算法。</p><h1 id=\"linux内核ipvs使用的wrr算法\"><a name=\"t2\"></a>Linux内核IPVS使用的WRR算法</h1><p>这里接不介绍IPVS了，直接切入算法本身，详见<strong><em>net/netfilter/ipvs/ip_vs_wrr.c</em></strong>中的结构体：</p><pre name=\"code\"><code>static struct ip_vs_scheduler ip_vs_wrr_scheduler = {\n    .name =         \"wrr\",\n    .refcnt =       ATOMIC_INIT(0),\n    .module =       THIS_MODULE,\n    .n_list =       LIST_HEAD_INIT(ip_vs_wrr_scheduler.n_list),\n    .init_service =     ip_vs_wrr_init_svc,\n    .done_service =     ip_vs_wrr_done_svc,\n    .add_dest =     ip_vs_wrr_dest_changed,\n    .del_dest =     ip_vs_wrr_dest_changed,\n    .upd_dest =     ip_vs_wrr_dest_changed,\n    .schedule =     ip_vs_wrr_schedule,\n};</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li></ul></pre><p>这里重点关注schedule 回调函数ip_vs_wrr_schedule。</p><p>  为了让事情更加直观，不至于陷入到Linux内核源码IPVS复杂业务逻辑的深渊，这里给出其Wiki上上的写法，摘自：<a href=\"http://kb.linuxvirtualserver.org/wiki/Weighted_Round-Robin_Scheduling\" target=\"_blank\">http://kb.linuxvirtualserver.org/wiki/Weighted_Round-Robin_Scheduling</a>：</p><pre name=\"code\"><code>Supposing that there is a server set S = {S0, S1, …, Sn-1};\nW(Si) indicates the weight of Si;\ni indicates the server selected last time, and i is initialized with -1;\ncw is the current weight in scheduling, and cw is initialized with zero; \nmax(S) is the maximum weight of all the servers in S;\ngcd(S) is the greatest common divisor of all server weights in S;\n\nwhile (true) {\n    i = (i + 1) mod n;\n    if (i == 0) {\n        cw = cw - gcd(S); \n        if (cw &lt;= 0) {\n            cw = max(S);\n            if (cw == 0)\n            return NULL;\n        }\n    } \n    if (W(Si) &gt;= cw) \n        return Si;\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li></ul></pre><p>如果你还是没有一个直观上的感受，下面是我写的一个简单的能run的程序，直接编译运行即可：</p><pre name=\"code\"><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct entry {\n        int weight;\n};\n\nstruct entry *g_entry = NULL;\nint max_weight = 0;\nint curr_weight = 0;\nint divisor = 0;\nint iter = -1;\n\n\nint gcd(int a, int b)  \n{  \n        if (a == 0) {\n                return b;\n        }\n        return gcd(b%a, a);  \n} \n\nstruct entry *next(int size) \n{\n\n        struct entry *ent;\n        while (1) {\n                iter = (iter + 1) % size;\n                if (iter == 0) {\n                        curr_weight = curr_weight - divisor; \n                        if (curr_weight &lt;= 0) {\n                                curr_weight = max_weight;\n                        }\n                } \n                ent = &amp;g_entry[iter];\n                if (ent-&gt;weight &gt;= curr_weight) {\n                        return ent;\n                }\n        }\n}\n\nint main(int argc, char **argv)\n{\n        int size = atoi(argv[1]);\n        int i = 0;\n        int total = 0;\n\n        g_entry = (struct entry *)calloc(size, sizeof(struct entry));\n        for (i = 0; i &lt; size; i++) {\n                struct entry *ent = &amp;g_entry[i];\n                ent-&gt;weight = atoi(argv[i+2]);\n                total += ent-&gt;weight;\n                if (ent-&gt;weight &gt; max_weight) {\n                        max_weight = ent-&gt;weight;\n                }\n                divisor = gcd(divisor, ent-&gt;weight);\n        }\n\n        for (i = 0; i &lt; total; i++) {\n                struct entry *ent = next(size);\n                printf(\"[LAST]: %d\\n\", ent-&gt;weight);\n        }\n\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li>49</li><li>50</li><li>51</li><li>52</li><li>53</li><li>54</li><li>55</li><li>56</li><li>57</li><li>58</li><li>59</li><li>60</li><li>61</li><li>62</li><li>63</li><li>64</li></ul></pre><p>你可以这样使用这个程序：</p><pre name=\"code\"><code># 这里生成一个3(第一个参数)个元素的集合，其权值分别为5,1,1(后面的参数)\n./a.out 3 5 1 1</code><ul><li>1</li><li>2</li></ul></pre><h2 id=\"简单的证明和分析\"><a name=\"t3\"></a>简单的证明和分析</h2><p>这个算法给出的结果总是正确的吗？回答这个问题我觉得非常简单直观，请看下图：&nbsp;<br><img src=\"https://img-blog.csdn.net/20180427080355811?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p><p>按照上图中的规则，取元素的顺序则是：</p><p><img src=\"https://img-blog.csdn.net/20180427080846876?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvZzI1MA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p><hr><p>在数学上证明算法的正确性似乎也不难，设一个元素的权值为<span id=\"MathJax-Element-1-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1\"><span id=\"MathJax-Span-2\"><span id=\"MathJax-Span-3\"><span id=\"MathJax-Span-4\">W</span><span id=\"MathJax-Span-5\">i</span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mi>i</mi></msub></math></span></span>，那么它在锚点一轮轮询中被选中的次数就是<span id=\"MathJax-Element-2-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-6\"><span id=\"MathJax-Span-7\"><span id=\"MathJax-Span-8\"><span id=\"MathJax-Span-9\"><span id=\"MathJax-Span-10\"><span id=\"MathJax-Span-11\"><span id=\"MathJax-Span-12\">W</span><span id=\"MathJax-Span-13\">i</span></span><span id=\"MathJax-Span-14\"><span id=\"MathJax-Span-15\">d</span><span id=\"MathJax-Span-16\">i</span><span id=\"MathJax-Span-17\">v</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mstyle display=\"\" scriptlevel=\"0\"><mfrac><msub><mi>W</mi><mi>i</mi></msub><mrow><mi>d</mi><mi>i</mi><mi>v</mi></mrow></mfrac></mstyle></math></span></span>，可见，对于一个固定的序列，其<span id=\"MathJax-Element-3-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-18\"><span id=\"MathJax-Span-19\"><span id=\"MathJax-Span-20\">d</span><span id=\"MathJax-Span-21\">i</span><span id=\"MathJax-Span-22\">v</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>d</mi><mi>i</mi><mi>v</mi></math></span></span>一定，一个元素被选中的次数与其权值成正比，这便符合了算法的要求。</p><h2 id=\"问题\"><a name=\"t4\"></a>问题</h2><p>观察上面的图，如果一个集合中最大权值的元素和次大权值的元素相隔太远，那么这个算法在选元素的时候是不会把权值大的元素打散的，比如：</p><pre name=\"code\"><code>root@debian:/home/zhaoya# ./a.out 2 5 1\n[LAST]: 5\n[LAST]: 5\n[LAST]: 5\n[LAST]: 5\n[LAST]: 5\n[LAST]: 1</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ul></pre><p>映射回负载均衡的真实场景，这显然会对某些大权值的服务器造成很大的压力，因此对这个算法的改进或者说换另外一个算法是一件必须要做的事。接下来我们就开始分析一个结果序列更加平均的WRR算法，即Nginx服务器中使用的WRR算法。</p><hr><h1 id=\"nginx使用的wrr算法\"><a name=\"t5\"></a>Nginx使用的WRR算法</h1><p>关于这个算法，具体的描述详见：&nbsp;<br><a href=\"https://github.com/phusion/nginx/commit/27e94984486058d73157038f7950a0a36ecc6e35\" target=\"_blank\">https://github.com/phusion/nginx/commit/27e94984486058d73157038f7950a0a36ecc6e35</a></p><p>和分析IPVS之WRR算法的做法一样，我依然给出一个能run的代码，其运行方法与上述IPVS的算法完全一致：</p><pre name=\"code\"><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct entry {\n        int weight;\n        int curr_weight;\n};\n\nstruct entry *curr_entry = NULL;\nstruct entry *g_entry = NULL;\n\nstruct entry *next(struct entry *entrys, int size) \n{\n\n        struct entry *ent;\n        int i = 0, total = 0;\n        for (i = 0; i &lt; size; i++) {\n                ent = &amp;entrys[i];\n                ent-&gt;curr_weight += ent-&gt;weight;\n                total += ent-&gt;weight;\n                if (curr_entry == NULL || ent-&gt;curr_weight &gt; curr_entry-&gt;curr_weight) {\n                        curr_entry = ent;\n                }\n        }\n        curr_entry-&gt;curr_weight -= total;\n        for (i = 0; i &lt; size; i++) {\n                ent = &amp;entrys[i];\n        }\n        return curr_entry;\n}\n\nint main(int argc, char **argv)\n{\n        int size = atoi(argv[1]);\n        int i = 0;\n        int total = 0;\n\n        g_entry = (struct entry *)calloc(size, sizeof(struct entry));\n        for (i = 0; i &lt; size; i++) {\n                struct entry *ent = &amp;g_entry[i];\n                ent-&gt;weight = atoi(argv[i+2]);\n                total += ent-&gt;weight;\n        }\n\n\n        for (i = 0; i &lt; total; i++) {\n                struct entry *ent = next(g_entry, size);\n                printf(\"[LAST]: %d\\n\", ent-&gt;weight);\n        }\n\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li>49</li><li>50</li><li>51</li></ul></pre><p>以上就是Nginx所采用的WRR算法的代码描述，在大多数情况下，采用这种算法是一个不错的选择。即满足了固定的加权平均，又使得元素的选择尽可能地分散开来，非常精妙！</p><p>  该算法与IPVS的WRR按照某种规则和组织静态遍历完全不同，它完全是一个<strong><em>动态的过程</em></strong>，因此除非用动画，否则一张图无法展示全貌。我用简单的3个元素加权来描述一下这个算法。假设有3个具有不同权值的<span id=\"MathJax-Element-4-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-23\"><span id=\"MathJax-Span-24\"><span id=\"MathJax-Span-25\">{</span><span id=\"MathJax-Span-26\">A</span><span id=\"MathJax-Span-27\">:</span><span id=\"MathJax-Span-28\">a</span><span id=\"MathJax-Span-29\">,</span><span id=\"MathJax-Span-30\">B</span><span id=\"MathJax-Span-31\">:</span><span id=\"MathJax-Span-32\">b</span><span id=\"MathJax-Span-33\">,</span><span id=\"MathJax-Span-34\">C</span><span id=\"MathJax-Span-35\">:</span><span id=\"MathJax-Span-36\">c</span><span id=\"MathJax-Span-37\">}</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo fence=\"false\" stretchy=\"false\">{</mo><mi>A</mi><mo>:</mo><mi>a</mi><mo>,</mo><mi>B</mi><mo>:</mo><mi>b</mi><mo>,</mo><mi>C</mi><mo>:</mo><mi>c</mi><mo fence=\"false\" stretchy=\"false\">}</mo></math></span></span>元素供选择，在一轮轮询中，3个元素分别被递加其权值的递增量为：</p><p><strong><em>元素<span id=\"MathJax-Element-5-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-38\"><span id=\"MathJax-Span-39\"><span id=\"MathJax-Span-40\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>递增<span id=\"MathJax-Element-6-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-41\"><span id=\"MathJax-Span-42\"><span id=\"MathJax-Span-43\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>的量：<span id=\"MathJax-Element-7-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-44\"><span id=\"MathJax-Span-45\"><span id=\"MathJax-Span-46\">a</span><span id=\"MathJax-Span-47\">×</span><span id=\"MathJax-Span-48\">(</span><span id=\"MathJax-Span-49\">a</span><span id=\"MathJax-Span-50\">+</span><span id=\"MathJax-Span-51\">b</span><span id=\"MathJax-Span-52\">+</span><span id=\"MathJax-Span-53\">c</span><span id=\"MathJax-Span-54\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span></em></strong>&nbsp;<br><strong><em>元素<span id=\"MathJax-Element-8-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-55\"><span id=\"MathJax-Span-56\"><span id=\"MathJax-Span-57\">B</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>B</mi></math></span></span>递增<span id=\"MathJax-Element-9-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-58\"><span id=\"MathJax-Span-59\"><span id=\"MathJax-Span-60\">b</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>b</mi></math></span></span>选中的量：<span id=\"MathJax-Element-10-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-61\"><span id=\"MathJax-Span-62\"><span id=\"MathJax-Span-63\">b</span><span id=\"MathJax-Span-64\">×</span><span id=\"MathJax-Span-65\">(</span><span id=\"MathJax-Span-66\">a</span><span id=\"MathJax-Span-67\">+</span><span id=\"MathJax-Span-68\">b</span><span id=\"MathJax-Span-69\">+</span><span id=\"MathJax-Span-70\">c</span><span id=\"MathJax-Span-71\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>b</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span></em></strong>&nbsp;<br><strong><em>元素<span id=\"MathJax-Element-11-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-72\"><span id=\"MathJax-Span-73\"><span id=\"MathJax-Span-74\">C</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>C</mi></math></span></span>递增<span id=\"MathJax-Element-12-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-75\"><span id=\"MathJax-Span-76\"><span id=\"MathJax-Span-77\">c</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>c</mi></math></span></span>选中的量：<span id=\"MathJax-Element-13-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-78\"><span id=\"MathJax-Span-79\"><span id=\"MathJax-Span-80\">c</span><span id=\"MathJax-Span-81\">×</span><span id=\"MathJax-Span-82\">(</span><span id=\"MathJax-Span-83\">a</span><span id=\"MathJax-Span-84\">+</span><span id=\"MathJax-Span-85\">b</span><span id=\"MathJax-Span-86\">+</span><span id=\"MathJax-Span-87\">c</span><span id=\"MathJax-Span-88\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>c</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span></em></strong></p><p>每选中一个元素，将会从其递增量中减去<span id=\"MathJax-Element-14-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-89\"><span id=\"MathJax-Span-90\"><span id=\"MathJax-Span-91\">(</span><span id=\"MathJax-Span-92\">a</span><span id=\"MathJax-Span-93\">+</span><span id=\"MathJax-Span-94\">b</span><span id=\"MathJax-Span-95\">+</span><span id=\"MathJax-Span-96\">c</span><span id=\"MathJax-Span-97\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>，那么很显然，问题部分地被转化为<strong><em>求出每个元素递增量中包含<u>多少个</u>递减量便是该元素会被选中的次数</em></strong>。最终，我们承认下面的解是一个正确的解：</p><p><strong><em>元素<span id=\"MathJax-Element-15-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-98\"><span id=\"MathJax-Span-99\"><span id=\"MathJax-Span-100\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>被选中的次数：<span id=\"MathJax-Element-16-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-101\"><span id=\"MathJax-Span-102\"><span id=\"MathJax-Span-103\"><span id=\"MathJax-Span-104\"><span id=\"MathJax-Span-105\"><span id=\"MathJax-Span-106\"><span id=\"MathJax-Span-107\">a</span><span id=\"MathJax-Span-108\">×</span><span id=\"MathJax-Span-109\">(</span><span id=\"MathJax-Span-110\">a</span><span id=\"MathJax-Span-111\">+</span><span id=\"MathJax-Span-112\">b</span><span id=\"MathJax-Span-113\">+</span><span id=\"MathJax-Span-114\">c</span><span id=\"MathJax-Span-115\">)</span></span><span id=\"MathJax-Span-116\"><span id=\"MathJax-Span-117\">a</span><span id=\"MathJax-Span-118\">+</span><span id=\"MathJax-Span-119\">b</span><span id=\"MathJax-Span-120\">+</span><span id=\"MathJax-Span-121\">c</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mstyle display=\"\" scriptlevel=\"0\"><mfrac><mrow><mi>a</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mfrac></mstyle></math></span></span>次</em></strong>&nbsp;<br><strong><em>元素<span id=\"MathJax-Element-17-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-122\"><span id=\"MathJax-Span-123\"><span id=\"MathJax-Span-124\">B</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>B</mi></math></span></span>被选中的次数：<span id=\"MathJax-Element-18-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-125\"><span id=\"MathJax-Span-126\"><span id=\"MathJax-Span-127\"><span id=\"MathJax-Span-128\"><span id=\"MathJax-Span-129\"><span id=\"MathJax-Span-130\"><span id=\"MathJax-Span-131\">b</span><span id=\"MathJax-Span-132\">×</span><span id=\"MathJax-Span-133\">(</span><span id=\"MathJax-Span-134\">a</span><span id=\"MathJax-Span-135\">+</span><span id=\"MathJax-Span-136\">b</span><span id=\"MathJax-Span-137\">+</span><span id=\"MathJax-Span-138\">c</span><span id=\"MathJax-Span-139\">)</span></span><span id=\"MathJax-Span-140\"><span id=\"MathJax-Span-141\">a</span><span id=\"MathJax-Span-142\">+</span><span id=\"MathJax-Span-143\">b</span><span id=\"MathJax-Span-144\">+</span><span id=\"MathJax-Span-145\">c</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mstyle display=\"\" scriptlevel=\"0\"><mfrac><mrow><mi>b</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mfrac></mstyle></math></span></span>次</em></strong>&nbsp;<br><strong><em>元素<span id=\"MathJax-Element-19-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-146\"><span id=\"MathJax-Span-147\"><span id=\"MathJax-Span-148\">C</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>C</mi></math></span></span>被选中的次数：<span id=\"MathJax-Element-20-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-149\"><span id=\"MathJax-Span-150\"><span id=\"MathJax-Span-151\"><span id=\"MathJax-Span-152\"><span id=\"MathJax-Span-153\"><span id=\"MathJax-Span-154\"><span id=\"MathJax-Span-155\">c</span><span id=\"MathJax-Span-156\">×</span><span id=\"MathJax-Span-157\">(</span><span id=\"MathJax-Span-158\">a</span><span id=\"MathJax-Span-159\">+</span><span id=\"MathJax-Span-160\">b</span><span id=\"MathJax-Span-161\">+</span><span id=\"MathJax-Span-162\">c</span><span id=\"MathJax-Span-163\">)</span></span><span id=\"MathJax-Span-164\"><span id=\"MathJax-Span-165\">a</span><span id=\"MathJax-Span-166\">+</span><span id=\"MathJax-Span-167\">b</span><span id=\"MathJax-Span-168\">+</span><span id=\"MathJax-Span-169\">c</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mstyle display=\"\" scriptlevel=\"0\"><mfrac><mrow><mi>c</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mfrac></mstyle></math></span></span>次</em></strong></p><p>  然而，这个解是唯一的解吗？如何证明这是唯一解？这便是一个数学问题。理解并使用该算法是完全没有问题的，coders深谙此道，然而想要彻底理解它，则必须要证明<strong><em>在算法的操作下，最终得到的解是唯一解</em></strong>，接下来我就简单用反证法来证明一下。</p><h2 id=\"算法的描述\"><a name=\"t6\"></a>算法的描述</h2><p>这个算法很有意思，所有集合一开始各就各位初始化自己的<span id=\"MathJax-Element-21-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-170\"><span id=\"MathJax-Span-171\"><span id=\"MathJax-Span-172\"><span id=\"MathJax-Span-173\">W</span><span id=\"MathJax-Span-174\"><span id=\"MathJax-Span-175\"><span id=\"MathJax-Span-176\">c</span><span id=\"MathJax-Span-177\">u</span><span id=\"MathJax-Span-178\">r</span><span id=\"MathJax-Span-179\"><span id=\"MathJax-Span-180\">r</span><span id=\"MathJax-Span-181\">i</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub></math></span></span>为自己的权值，然后谁获胜(<u>即其<span id=\"MathJax-Element-22-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-182\"><span id=\"MathJax-Span-183\"><span id=\"MathJax-Span-184\"><span id=\"MathJax-Span-185\">W</span><span id=\"MathJax-Span-186\"><span id=\"MathJax-Span-187\"><span id=\"MathJax-Span-188\">c</span><span id=\"MathJax-Span-189\">u</span><span id=\"MathJax-Span-190\">r</span><span id=\"MathJax-Span-191\"><span id=\"MathJax-Span-192\">r</span><span id=\"MathJax-Span-193\">i</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub></math></span></span>最大</u>)，谁就要减掉所有元素的权值之和<span id=\"MathJax-Element-23-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-194\"><span id=\"MathJax-Span-195\"><span id=\"MathJax-Span-196\">(</span><span id=\"MathJax-Span-197\">a</span><span id=\"MathJax-Span-198\">+</span><span id=\"MathJax-Span-199\">b</span><span id=\"MathJax-Span-200\">+</span><span id=\"MathJax-Span-201\">c</span><span id=\"MathJax-Span-202\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>，接下来继续推进一步，每一个元素再加上自己的权值…最终我们发现，每一步推进过程，每一个元素各自增加自身的权值，然后获胜者把所有元素增加的权值一次性做减法，这意味着，任何时候，在选择元素前：</p><p><span id=\"MathJax-Element-24-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-203\"><span id=\"MathJax-Span-204\"><span id=\"MathJax-Span-205\">Σ</span><span id=\"MathJax-Span-206\"><span id=\"MathJax-Span-207\">W</span><span id=\"MathJax-Span-208\"><span id=\"MathJax-Span-209\"><span id=\"MathJax-Span-210\">c</span><span id=\"MathJax-Span-211\">u</span><span id=\"MathJax-Span-212\">r</span><span id=\"MathJax-Span-213\"><span id=\"MathJax-Span-214\">r</span><span id=\"MathJax-Span-215\">i</span></span></span></span></span><span id=\"MathJax-Span-216\">=</span><span id=\"MathJax-Span-217\">a</span><span id=\"MathJax-Span-218\">+</span><span id=\"MathJax-Span-219\">b</span><span id=\"MathJax-Span-220\">+</span><span id=\"MathJax-Span-221\">c</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi mathvariant=\"normal\">Σ</mi><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></math></span></span></p><p>而选择了<span id=\"MathJax-Element-25-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-222\"><span id=\"MathJax-Span-223\"><span id=\"MathJax-Span-224\"><span id=\"MathJax-Span-225\">W</span><span id=\"MathJax-Span-226\"><span id=\"MathJax-Span-227\"><span id=\"MathJax-Span-228\">c</span><span id=\"MathJax-Span-229\">u</span><span id=\"MathJax-Span-230\">r</span><span id=\"MathJax-Span-231\"><span id=\"MathJax-Span-232\">r</span><span id=\"MathJax-Span-233\">i</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub></math></span></span>最大的元素后：</p><p><span id=\"MathJax-Element-26-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-234\"><span id=\"MathJax-Span-235\"><span id=\"MathJax-Span-236\">Σ</span><span id=\"MathJax-Span-237\"><span id=\"MathJax-Span-238\">W</span><span id=\"MathJax-Span-239\"><span id=\"MathJax-Span-240\"><span id=\"MathJax-Span-241\">c</span><span id=\"MathJax-Span-242\">u</span><span id=\"MathJax-Span-243\">r</span><span id=\"MathJax-Span-244\"><span id=\"MathJax-Span-245\">r</span><span id=\"MathJax-Span-246\">i</span></span></span></span></span><span id=\"MathJax-Span-247\">=</span><span id=\"MathJax-Span-248\">0</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi mathvariant=\"normal\">Σ</mi><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub><mo>=</mo><mn>0</mn></math></span></span></p><p>这像不像古代军队弓箭手放乱箭的过程，简直太像了！同时，这是一种<strong><em>非积累即时消费</em></strong>的模型，即<u>获胜者一次性消费掉其它选手在本轮中获取的配额</u>。<strong><em>这种非积累特性抹掉了很多潜在的记忆阻止了幂律产生作用，让结果散列地更均匀</em></strong>。</p><hr><h2 id=\"算法正确性证明\"><a name=\"t7\"></a>算法正确性证明</h2><p>假设在集合<span id=\"MathJax-Element-27-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-249\"><span id=\"MathJax-Span-250\"><span id=\"MathJax-Span-251\">{</span><span id=\"MathJax-Span-252\">A</span><span id=\"MathJax-Span-253\">:</span><span id=\"MathJax-Span-254\">a</span><span id=\"MathJax-Span-255\">,</span><span id=\"MathJax-Span-256\">B</span><span id=\"MathJax-Span-257\">:</span><span id=\"MathJax-Span-258\">b</span><span id=\"MathJax-Span-259\">,</span><span id=\"MathJax-Span-260\">C</span><span id=\"MathJax-Span-261\">:</span><span id=\"MathJax-Span-262\">c</span><span id=\"MathJax-Span-263\">}</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo fence=\"false\" stretchy=\"false\">{</mo><mi>A</mi><mo>:</mo><mi>a</mi><mo>,</mo><mi>B</mi><mo>:</mo><mi>b</mi><mo>,</mo><mi>C</mi><mo>:</mo><mi>c</mi><mo fence=\"false\" stretchy=\"false\">}</mo></math></span></span>尚未取够<span id=\"MathJax-Element-28-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-264\"><span id=\"MathJax-Span-265\"><span id=\"MathJax-Span-266\">(</span><span id=\"MathJax-Span-267\">a</span><span id=\"MathJax-Span-268\">+</span><span id=\"MathJax-Span-269\">b</span><span id=\"MathJax-Span-270\">+</span><span id=\"MathJax-Span-271\">c</span><span id=\"MathJax-Span-272\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>个元素的时候，权重为<span id=\"MathJax-Element-29-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-273\"><span id=\"MathJax-Span-274\"><span id=\"MathJax-Span-275\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>的元素<span id=\"MathJax-Element-30-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-276\"><span id=\"MathJax-Span-277\"><span id=\"MathJax-Span-278\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>已经取满了<span id=\"MathJax-Element-31-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-279\"><span id=\"MathJax-Span-280\"><span id=\"MathJax-Span-281\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>个，此时：</p><p><span id=\"MathJax-Element-32-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-282\"><span id=\"MathJax-Span-283\"><span id=\"MathJax-Span-284\"><span id=\"MathJax-Span-285\">W</span><span id=\"MathJax-Span-286\"><span id=\"MathJax-Span-287\"><span id=\"MathJax-Span-288\">c</span><span id=\"MathJax-Span-289\">u</span><span id=\"MathJax-Span-290\">r</span><span id=\"MathJax-Span-291\"><span id=\"MathJax-Span-292\">r</span><span id=\"MathJax-Span-293\">a</span></span></span></span></span><span id=\"MathJax-Span-294\">=</span><span id=\"MathJax-Span-295\">N</span><span id=\"MathJax-Span-296\">×</span><span id=\"MathJax-Span-297\">a</span><span id=\"MathJax-Span-298\">−</span><span id=\"MathJax-Span-299\">(</span><span id=\"MathJax-Span-300\">a</span><span id=\"MathJax-Span-301\">−</span><span id=\"MathJax-Span-302\">1</span><span id=\"MathJax-Span-303\">)</span><span id=\"MathJax-Span-304\">(</span><span id=\"MathJax-Span-305\">a</span><span id=\"MathJax-Span-306\">+</span><span id=\"MathJax-Span-307\">b</span><span id=\"MathJax-Span-308\">+</span><span id=\"MathJax-Span-309\">c</span><span id=\"MathJax-Span-310\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>a</mi></msub></mrow></msub><mo>=</mo><mi>N</mi><mo>×</mo><mi>a</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>&nbsp;<br><span id=\"MathJax-Element-33-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-311\"><span id=\"MathJax-Span-312\"><span id=\"MathJax-Span-313\"><span id=\"MathJax-Span-314\">W</span><span id=\"MathJax-Span-315\"><span id=\"MathJax-Span-316\"><span id=\"MathJax-Span-317\">c</span><span id=\"MathJax-Span-318\">u</span><span id=\"MathJax-Span-319\">r</span><span id=\"MathJax-Span-320\"><span id=\"MathJax-Span-321\">r</span><span id=\"MathJax-Span-322\">b</span></span></span></span></span><span id=\"MathJax-Span-323\">=</span><span id=\"MathJax-Span-324\">N</span><span id=\"MathJax-Span-325\">×</span><span id=\"MathJax-Span-326\">b</span><span id=\"MathJax-Span-327\">−</span><span id=\"MathJax-Span-328\"><span id=\"MathJax-Span-329\">m</span><span id=\"MathJax-Span-330\"><span id=\"MathJax-Span-331\"><span id=\"MathJax-Span-332\"><span id=\"MathJax-Span-333\">b</span><span id=\"MathJax-Span-334\">1</span></span></span></span></span><span id=\"MathJax-Span-335\">(</span><span id=\"MathJax-Span-336\">a</span><span id=\"MathJax-Span-337\">+</span><span id=\"MathJax-Span-338\">b</span><span id=\"MathJax-Span-339\">+</span><span id=\"MathJax-Span-340\">c</span><span id=\"MathJax-Span-341\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>b</mi></msub></mrow></msub><mo>=</mo><mi>N</mi><mo>×</mo><mi>b</mi><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>&nbsp;<br><span id=\"MathJax-Element-34-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-342\"><span id=\"MathJax-Span-343\"><span id=\"MathJax-Span-344\"><span id=\"MathJax-Span-345\">W</span><span id=\"MathJax-Span-346\"><span id=\"MathJax-Span-347\"><span id=\"MathJax-Span-348\">c</span><span id=\"MathJax-Span-349\">u</span><span id=\"MathJax-Span-350\">r</span><span id=\"MathJax-Span-351\"><span id=\"MathJax-Span-352\">r</span><span id=\"MathJax-Span-353\">c</span></span></span></span></span><span id=\"MathJax-Span-354\">=</span><span id=\"MathJax-Span-355\">N</span><span id=\"MathJax-Span-356\">×</span><span id=\"MathJax-Span-357\">c</span><span id=\"MathJax-Span-358\">−</span><span id=\"MathJax-Span-359\"><span id=\"MathJax-Span-360\">m</span><span id=\"MathJax-Span-361\"><span id=\"MathJax-Span-362\"><span id=\"MathJax-Span-363\"><span id=\"MathJax-Span-364\">c</span><span id=\"MathJax-Span-365\">1</span></span></span></span></span><span id=\"MathJax-Span-366\">(</span><span id=\"MathJax-Span-367\">a</span><span id=\"MathJax-Span-368\">+</span><span id=\"MathJax-Span-369\">b</span><span id=\"MathJax-Span-370\">+</span><span id=\"MathJax-Span-371\">c</span><span id=\"MathJax-Span-372\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>c</mi></msub></mrow></msub><mo>=</mo><mi>N</mi><mo>×</mo><mi>c</mi><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span></p><p>由算法基本逻辑，我们知道上面<span id=\"MathJax-Element-35-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-373\"><span id=\"MathJax-Span-374\"><span id=\"MathJax-Span-375\">3</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>3</mn></math></span></span>式子相加等于<span id=\"MathJax-Element-36-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-376\"><span id=\"MathJax-Span-377\"><span id=\"MathJax-Span-378\">(</span><span id=\"MathJax-Span-379\">a</span><span id=\"MathJax-Span-380\">+</span><span id=\"MathJax-Span-381\">b</span><span id=\"MathJax-Span-382\">+</span><span id=\"MathJax-Span-383\">c</span><span id=\"MathJax-Span-384\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>：</p><p><span id=\"MathJax-Element-37-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-385\"><span id=\"MathJax-Span-386\"><span id=\"MathJax-Span-387\">Σ</span><span id=\"MathJax-Span-388\"><span id=\"MathJax-Span-389\">W</span><span id=\"MathJax-Span-390\"><span id=\"MathJax-Span-391\"><span id=\"MathJax-Span-392\">c</span><span id=\"MathJax-Span-393\">u</span><span id=\"MathJax-Span-394\">r</span><span id=\"MathJax-Span-395\"><span id=\"MathJax-Span-396\">r</span><span id=\"MathJax-Span-397\">i</span></span></span></span></span><span id=\"MathJax-Span-398\">=</span><span id=\"MathJax-Span-399\">N</span><span id=\"MathJax-Span-400\">×</span><span id=\"MathJax-Span-401\">(</span><span id=\"MathJax-Span-402\">a</span><span id=\"MathJax-Span-403\">+</span><span id=\"MathJax-Span-404\">b</span><span id=\"MathJax-Span-405\">+</span><span id=\"MathJax-Span-406\">c</span><span id=\"MathJax-Span-407\">)</span><span id=\"MathJax-Span-408\">−</span><span id=\"MathJax-Span-409\">(</span><span id=\"MathJax-Span-410\">a</span><span id=\"MathJax-Span-411\">−</span><span id=\"MathJax-Span-412\">1</span><span id=\"MathJax-Span-413\">+</span><span id=\"MathJax-Span-414\"><span id=\"MathJax-Span-415\">m</span><span id=\"MathJax-Span-416\"><span id=\"MathJax-Span-417\"><span id=\"MathJax-Span-418\"><span id=\"MathJax-Span-419\">b</span><span id=\"MathJax-Span-420\">1</span></span></span></span></span><span id=\"MathJax-Span-421\">+</span><span id=\"MathJax-Span-422\"><span id=\"MathJax-Span-423\">m</span><span id=\"MathJax-Span-424\"><span id=\"MathJax-Span-425\"><span id=\"MathJax-Span-426\"><span id=\"MathJax-Span-427\">c</span><span id=\"MathJax-Span-428\">1</span></span></span></span></span><span id=\"MathJax-Span-429\">)</span><span id=\"MathJax-Span-430\">(</span><span id=\"MathJax-Span-431\">a</span><span id=\"MathJax-Span-432\">+</span><span id=\"MathJax-Span-433\">b</span><span id=\"MathJax-Span-434\">+</span><span id=\"MathJax-Span-435\">c</span><span id=\"MathJax-Span-436\">)</span><span id=\"MathJax-Span-437\">=</span><span id=\"MathJax-Span-438\">(</span><span id=\"MathJax-Span-439\">a</span><span id=\"MathJax-Span-440\">+</span><span id=\"MathJax-Span-441\">b</span><span id=\"MathJax-Span-442\">+</span><span id=\"MathJax-Span-443\">c</span><span id=\"MathJax-Span-444\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi mathvariant=\"normal\">Σ</mi><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub><mo>=</mo><mi>N</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mn>1</mn><mo>+</mo><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow></msub><mo>+</mo><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span></p><p>化简得到：</p><p><span id=\"MathJax-Element-38-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-445\"><span id=\"MathJax-Span-446\"><span id=\"MathJax-Span-447\">N</span><span id=\"MathJax-Span-448\">=</span><span id=\"MathJax-Span-449\">a</span><span id=\"MathJax-Span-450\">+</span><span id=\"MathJax-Span-451\"><span id=\"MathJax-Span-452\">m</span><span id=\"MathJax-Span-453\"><span id=\"MathJax-Span-454\"><span id=\"MathJax-Span-455\"><span id=\"MathJax-Span-456\">b</span><span id=\"MathJax-Span-457\">1</span></span></span></span></span><span id=\"MathJax-Span-458\">+</span><span id=\"MathJax-Span-459\"><span id=\"MathJax-Span-460\">m</span><span id=\"MathJax-Span-461\"><span id=\"MathJax-Span-462\"><span id=\"MathJax-Span-463\"><span id=\"MathJax-Span-464\">c</span><span id=\"MathJax-Span-465\">1</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>N</mi><mo>=</mo><mi>a</mi><mo>+</mo><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow></msub><mo>+</mo><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow></msub></math></span></span>&nbsp;  <span id=\"MathJax-Element-39-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-466\"><span id=\"MathJax-Span-467\"><span id=\"MathJax-Span-468\">(</span><span id=\"MathJax-Span-469\">1</span><span id=\"MathJax-Span-470\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></math></span></span></p><p>现在假设，在取到第<span id=\"MathJax-Element-40-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-471\"><span id=\"MathJax-Span-472\"><span id=\"MathJax-Span-473\">T</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>T</mi></math></span></span><span id=\"MathJax-Element-41-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-474\"><span id=\"MathJax-Span-475\"><span id=\"MathJax-Span-476\">(</span><span id=\"MathJax-Span-477\">N</span><span id=\"MathJax-Span-478\">&lt;</span><span id=\"MathJax-Span-479\">T</span><span id=\"MathJax-Span-480\">&lt;</span><span id=\"MathJax-Span-481\">a</span><span id=\"MathJax-Span-482\">+</span><span id=\"MathJax-Span-483\">b</span><span id=\"MathJax-Span-484\">+</span><span id=\"MathJax-Span-485\">c</span><span id=\"MathJax-Span-486\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo stretchy=\"false\">(</mo><mi>N</mi><mo>&lt;</mo><mi>T</mi><mo>&lt;</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>个的时候，又取了一个权重为<span id=\"MathJax-Element-42-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-487\"><span id=\"MathJax-Span-488\"><span id=\"MathJax-Span-489\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>的元素<span id=\"MathJax-Element-43-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-490\"><span id=\"MathJax-Span-491\"><span id=\"MathJax-Span-492\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>，则此时根据算法逻辑计算<span id=\"MathJax-Element-44-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-493\"><span id=\"MathJax-Span-494\"><span id=\"MathJax-Span-495\"><span id=\"MathJax-Span-496\">W</span><span id=\"MathJax-Span-497\"><span id=\"MathJax-Span-498\"><span id=\"MathJax-Span-499\">c</span><span id=\"MathJax-Span-500\">u</span><span id=\"MathJax-Span-501\">r</span><span id=\"MathJax-Span-502\"><span id=\"MathJax-Span-503\">r</span><span id=\"MathJax-Span-504\">i</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub></math></span></span>：</p><p><span id=\"MathJax-Element-45-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-505\"><span id=\"MathJax-Span-506\"><span id=\"MathJax-Span-507\"><span id=\"MathJax-Span-508\">W</span><span id=\"MathJax-Span-509\"><span id=\"MathJax-Span-510\"><span id=\"MathJax-Span-511\">c</span><span id=\"MathJax-Span-512\">u</span><span id=\"MathJax-Span-513\">r</span><span id=\"MathJax-Span-514\"><span id=\"MathJax-Span-515\">r</span><span id=\"MathJax-Span-516\">a</span></span></span></span></span><span id=\"MathJax-Span-517\">=</span><span id=\"MathJax-Span-518\">T</span><span id=\"MathJax-Span-519\">×</span><span id=\"MathJax-Span-520\">a</span><span id=\"MathJax-Span-521\">−</span><span id=\"MathJax-Span-522\">(</span><span id=\"MathJax-Span-523\">a</span><span id=\"MathJax-Span-524\">+</span><span id=\"MathJax-Span-525\"><span id=\"MathJax-Span-526\">m</span><span id=\"MathJax-Span-527\">T</span></span><span id=\"MathJax-Span-528\">−</span><span id=\"MathJax-Span-529\">1</span><span id=\"MathJax-Span-530\">)</span><span id=\"MathJax-Span-531\">(</span><span id=\"MathJax-Span-532\">a</span><span id=\"MathJax-Span-533\">+</span><span id=\"MathJax-Span-534\">b</span><span id=\"MathJax-Span-535\">+</span><span id=\"MathJax-Span-536\">c</span><span id=\"MathJax-Span-537\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>a</mi></msub></mrow></msub><mo>=</mo><mi>T</mi><mo>×</mo><mi>a</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>&nbsp;  <span id=\"MathJax-Element-46-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-538\"><span id=\"MathJax-Span-539\"><span id=\"MathJax-Span-540\"><span id=\"MathJax-Span-541\">m</span><span id=\"MathJax-Span-542\">T</span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>m</mi><mi>T</mi></msub></math></span></span>为此间取到<span id=\"MathJax-Element-47-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-543\"><span id=\"MathJax-Span-544\"><span id=\"MathJax-Span-545\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>的次数&nbsp;<br><span id=\"MathJax-Element-48-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-546\"><span id=\"MathJax-Span-547\"><span id=\"MathJax-Span-548\"><span id=\"MathJax-Span-549\">W</span><span id=\"MathJax-Span-550\"><span id=\"MathJax-Span-551\"><span id=\"MathJax-Span-552\">c</span><span id=\"MathJax-Span-553\">u</span><span id=\"MathJax-Span-554\">r</span><span id=\"MathJax-Span-555\"><span id=\"MathJax-Span-556\">r</span><span id=\"MathJax-Span-557\">b</span></span></span></span></span><span id=\"MathJax-Span-558\">=</span><span id=\"MathJax-Span-559\">T</span><span id=\"MathJax-Span-560\">×</span><span id=\"MathJax-Span-561\">b</span><span id=\"MathJax-Span-562\">−</span><span id=\"MathJax-Span-563\"><span id=\"MathJax-Span-564\">m</span><span id=\"MathJax-Span-565\"><span id=\"MathJax-Span-566\"><span id=\"MathJax-Span-567\"><span id=\"MathJax-Span-568\">b</span><span id=\"MathJax-Span-569\">2</span></span></span></span></span><span id=\"MathJax-Span-570\">(</span><span id=\"MathJax-Span-571\">a</span><span id=\"MathJax-Span-572\">+</span><span id=\"MathJax-Span-573\">b</span><span id=\"MathJax-Span-574\">+</span><span id=\"MathJax-Span-575\">c</span><span id=\"MathJax-Span-576\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>b</mi></msub></mrow></msub><mo>=</mo><mi>T</mi><mo>×</mo><mi>b</mi><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>&nbsp;<br><span id=\"MathJax-Element-49-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-577\"><span id=\"MathJax-Span-578\"><span id=\"MathJax-Span-579\"><span id=\"MathJax-Span-580\">W</span><span id=\"MathJax-Span-581\"><span id=\"MathJax-Span-582\"><span id=\"MathJax-Span-583\">c</span><span id=\"MathJax-Span-584\">u</span><span id=\"MathJax-Span-585\">r</span><span id=\"MathJax-Span-586\"><span id=\"MathJax-Span-587\">r</span><span id=\"MathJax-Span-588\">c</span></span></span></span></span><span id=\"MathJax-Span-589\">=</span><span id=\"MathJax-Span-590\">T</span><span id=\"MathJax-Span-591\">×</span><span id=\"MathJax-Span-592\">c</span><span id=\"MathJax-Span-593\">−</span><span id=\"MathJax-Span-594\"><span id=\"MathJax-Span-595\">m</span><span id=\"MathJax-Span-596\"><span id=\"MathJax-Span-597\"><span id=\"MathJax-Span-598\"><span id=\"MathJax-Span-599\">c</span><span id=\"MathJax-Span-600\">2</span></span></span></span></span><span id=\"MathJax-Span-601\">(</span><span id=\"MathJax-Span-602\">a</span><span id=\"MathJax-Span-603\">+</span><span id=\"MathJax-Span-604\">b</span><span id=\"MathJax-Span-605\">+</span><span id=\"MathJax-Span-606\">c</span><span id=\"MathJax-Span-607\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>c</mi></msub></mrow></msub><mo>=</mo><mi>T</mi><mo>×</mo><mi>c</mi><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span></p><p>又因为取到权值为<span id=\"MathJax-Element-50-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-608\"><span id=\"MathJax-Span-609\"><span id=\"MathJax-Span-610\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>的元素<span id=\"MathJax-Element-51-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-611\"><span id=\"MathJax-Span-612\"><span id=\"MathJax-Span-613\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>的条件是此时其<span id=\"MathJax-Element-52-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-614\"><span id=\"MathJax-Span-615\"><span id=\"MathJax-Span-616\"><span id=\"MathJax-Span-617\">W</span><span id=\"MathJax-Span-618\">c</span></span><span id=\"MathJax-Span-619\">u</span><span id=\"MathJax-Span-620\">r</span><span id=\"MathJax-Span-621\">r</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mi>c</mi></msub><mi>u</mi><mi>r</mi><mi>r</mi></math></span></span>最大，则有：</p><p><span id=\"MathJax-Element-53-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-622\"><span id=\"MathJax-Span-623\"><span id=\"MathJax-Span-624\">T</span><span id=\"MathJax-Span-625\">×</span><span id=\"MathJax-Span-626\">a</span><span id=\"MathJax-Span-627\">−</span><span id=\"MathJax-Span-628\">(</span><span id=\"MathJax-Span-629\">a</span><span id=\"MathJax-Span-630\">+</span><span id=\"MathJax-Span-631\"><span id=\"MathJax-Span-632\">m</span><span id=\"MathJax-Span-633\">T</span></span><span id=\"MathJax-Span-634\">−</span><span id=\"MathJax-Span-635\">1</span><span id=\"MathJax-Span-636\">)</span><span id=\"MathJax-Span-637\">(</span><span id=\"MathJax-Span-638\">a</span><span id=\"MathJax-Span-639\">+</span><span id=\"MathJax-Span-640\">b</span><span id=\"MathJax-Span-641\">+</span><span id=\"MathJax-Span-642\">c</span><span id=\"MathJax-Span-643\">)</span><span id=\"MathJax-Span-644\">&gt;</span><span id=\"MathJax-Span-645\">T</span><span id=\"MathJax-Span-646\">×</span><span id=\"MathJax-Span-647\">b</span><span id=\"MathJax-Span-648\">−</span><span id=\"MathJax-Span-649\"><span id=\"MathJax-Span-650\">m</span><span id=\"MathJax-Span-651\"><span id=\"MathJax-Span-652\"><span id=\"MathJax-Span-653\"><span id=\"MathJax-Span-654\">b</span><span id=\"MathJax-Span-655\">2</span></span></span></span></span><span id=\"MathJax-Span-656\">(</span><span id=\"MathJax-Span-657\">a</span><span id=\"MathJax-Span-658\">+</span><span id=\"MathJax-Span-659\">b</span><span id=\"MathJax-Span-660\">+</span><span id=\"MathJax-Span-661\">c</span><span id=\"MathJax-Span-662\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>T</mi><mo>×</mo><mi>a</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>T</mi><mo>×</mo><mi>b</mi><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>&nbsp;<br><span id=\"MathJax-Element-54-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-663\"><span id=\"MathJax-Span-664\"><span id=\"MathJax-Span-665\">T</span><span id=\"MathJax-Span-666\">×</span><span id=\"MathJax-Span-667\">a</span><span id=\"MathJax-Span-668\">−</span><span id=\"MathJax-Span-669\">(</span><span id=\"MathJax-Span-670\">a</span><span id=\"MathJax-Span-671\">+</span><span id=\"MathJax-Span-672\"><span id=\"MathJax-Span-673\">m</span><span id=\"MathJax-Span-674\">T</span></span><span id=\"MathJax-Span-675\">−</span><span id=\"MathJax-Span-676\">1</span><span id=\"MathJax-Span-677\">)</span><span id=\"MathJax-Span-678\">(</span><span id=\"MathJax-Span-679\">a</span><span id=\"MathJax-Span-680\">+</span><span id=\"MathJax-Span-681\">b</span><span id=\"MathJax-Span-682\">+</span><span id=\"MathJax-Span-683\">c</span><span id=\"MathJax-Span-684\">)</span><span id=\"MathJax-Span-685\">&gt;</span><span id=\"MathJax-Span-686\">T</span><span id=\"MathJax-Span-687\">×</span><span id=\"MathJax-Span-688\">c</span><span id=\"MathJax-Span-689\">−</span><span id=\"MathJax-Span-690\"><span id=\"MathJax-Span-691\">m</span><span id=\"MathJax-Span-692\"><span id=\"MathJax-Span-693\"><span id=\"MathJax-Span-694\"><span id=\"MathJax-Span-695\">c</span><span id=\"MathJax-Span-696\">2</span></span></span></span></span><span id=\"MathJax-Span-697\">(</span><span id=\"MathJax-Span-698\">a</span><span id=\"MathJax-Span-699\">+</span><span id=\"MathJax-Span-700\">b</span><span id=\"MathJax-Span-701\">+</span><span id=\"MathJax-Span-702\">c</span><span id=\"MathJax-Span-703\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>T</mi><mo>×</mo><mi>a</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>T</mi><mo>×</mo><mi>c</mi><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span></p><p>化简上面式子：</p><p><span id=\"MathJax-Element-55-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-704\"><span id=\"MathJax-Span-705\"><span id=\"MathJax-Span-706\">T</span><span id=\"MathJax-Span-707\">×</span><span id=\"MathJax-Span-708\">(</span><span id=\"MathJax-Span-709\">a</span><span id=\"MathJax-Span-710\">−</span><span id=\"MathJax-Span-711\">b</span><span id=\"MathJax-Span-712\">)</span><span id=\"MathJax-Span-713\">&gt;</span><span id=\"MathJax-Span-714\">(</span><span id=\"MathJax-Span-715\">a</span><span id=\"MathJax-Span-716\">+</span><span id=\"MathJax-Span-717\"><span id=\"MathJax-Span-718\">m</span><span id=\"MathJax-Span-719\">T</span></span><span id=\"MathJax-Span-720\">−</span><span id=\"MathJax-Span-721\">1</span><span id=\"MathJax-Span-722\">−</span><span id=\"MathJax-Span-723\"><span id=\"MathJax-Span-724\">m</span><span id=\"MathJax-Span-725\"><span id=\"MathJax-Span-726\"><span id=\"MathJax-Span-727\"><span id=\"MathJax-Span-728\">b</span><span id=\"MathJax-Span-729\">2</span></span></span></span></span><span id=\"MathJax-Span-730\">)</span><span id=\"MathJax-Span-731\">(</span><span id=\"MathJax-Span-732\">a</span><span id=\"MathJax-Span-733\">+</span><span id=\"MathJax-Span-734\">b</span><span id=\"MathJax-Span-735\">+</span><span id=\"MathJax-Span-736\">c</span><span id=\"MathJax-Span-737\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>T</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>&nbsp;<br><span id=\"MathJax-Element-56-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-738\"><span id=\"MathJax-Span-739\"><span id=\"MathJax-Span-740\">T</span><span id=\"MathJax-Span-741\">×</span><span id=\"MathJax-Span-742\">(</span><span id=\"MathJax-Span-743\">a</span><span id=\"MathJax-Span-744\">−</span><span id=\"MathJax-Span-745\">c</span><span id=\"MathJax-Span-746\">)</span><span id=\"MathJax-Span-747\">&gt;</span><span id=\"MathJax-Span-748\">(</span><span id=\"MathJax-Span-749\">a</span><span id=\"MathJax-Span-750\">+</span><span id=\"MathJax-Span-751\"><span id=\"MathJax-Span-752\">m</span><span id=\"MathJax-Span-753\">T</span></span><span id=\"MathJax-Span-754\">−</span><span id=\"MathJax-Span-755\">1</span><span id=\"MathJax-Span-756\">−</span><span id=\"MathJax-Span-757\"><span id=\"MathJax-Span-758\">m</span><span id=\"MathJax-Span-759\"><span id=\"MathJax-Span-760\"><span id=\"MathJax-Span-761\"><span id=\"MathJax-Span-762\">c</span><span id=\"MathJax-Span-763\">2</span></span></span></span></span><span id=\"MathJax-Span-764\">)</span><span id=\"MathJax-Span-765\">(</span><span id=\"MathJax-Span-766\">a</span><span id=\"MathJax-Span-767\">+</span><span id=\"MathJax-Span-768\">b</span><span id=\"MathJax-Span-769\">+</span><span id=\"MathJax-Span-770\">c</span><span id=\"MathJax-Span-771\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>T</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow></msub><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span></p><p>根据条件<span id=\"MathJax-Element-57-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-772\"><span id=\"MathJax-Span-773\"><span id=\"MathJax-Span-774\">N</span><span id=\"MathJax-Span-775\">&lt;</span><span id=\"MathJax-Span-776\">T</span><span id=\"MathJax-Span-777\">&lt;</span><span id=\"MathJax-Span-778\">a</span><span id=\"MathJax-Span-779\">+</span><span id=\"MathJax-Span-780\">b</span><span id=\"MathJax-Span-781\">+</span><span id=\"MathJax-Span-782\">c</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>N</mi><mo>&lt;</mo><mi>T</mi><mo>&lt;</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></math></span></span>代入，则有：</p><p><span id=\"MathJax-Element-58-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-783\"><span id=\"MathJax-Span-784\"><span id=\"MathJax-Span-785\">T</span><span id=\"MathJax-Span-786\">×</span><span id=\"MathJax-Span-787\">(</span><span id=\"MathJax-Span-788\">a</span><span id=\"MathJax-Span-789\">−</span><span id=\"MathJax-Span-790\">b</span><span id=\"MathJax-Span-791\">)</span><span id=\"MathJax-Span-792\">&gt;</span><span id=\"MathJax-Span-793\">(</span><span id=\"MathJax-Span-794\">a</span><span id=\"MathJax-Span-795\">+</span><span id=\"MathJax-Span-796\"><span id=\"MathJax-Span-797\">m</span><span id=\"MathJax-Span-798\">T</span></span><span id=\"MathJax-Span-799\">−</span><span id=\"MathJax-Span-800\">1</span><span id=\"MathJax-Span-801\">−</span><span id=\"MathJax-Span-802\"><span id=\"MathJax-Span-803\">m</span><span id=\"MathJax-Span-804\"><span id=\"MathJax-Span-805\"><span id=\"MathJax-Span-806\"><span id=\"MathJax-Span-807\">b</span><span id=\"MathJax-Span-808\">2</span></span></span></span></span><span id=\"MathJax-Span-809\">)</span><span id=\"MathJax-Span-810\">×</span><span id=\"MathJax-Span-811\">T</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>T</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow></msub><mo stretchy=\"false\">)</mo><mo>×</mo><mi>T</mi></math></span></span>&nbsp;<br><span id=\"MathJax-Element-59-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-812\"><span id=\"MathJax-Span-813\"><span id=\"MathJax-Span-814\">T</span><span id=\"MathJax-Span-815\">×</span><span id=\"MathJax-Span-816\">(</span><span id=\"MathJax-Span-817\">a</span><span id=\"MathJax-Span-818\">−</span><span id=\"MathJax-Span-819\">c</span><span id=\"MathJax-Span-820\">)</span><span id=\"MathJax-Span-821\">&gt;</span><span id=\"MathJax-Span-822\">(</span><span id=\"MathJax-Span-823\">a</span><span id=\"MathJax-Span-824\">+</span><span id=\"MathJax-Span-825\"><span id=\"MathJax-Span-826\">m</span><span id=\"MathJax-Span-827\">T</span></span><span id=\"MathJax-Span-828\">−</span><span id=\"MathJax-Span-829\">1</span><span id=\"MathJax-Span-830\">−</span><span id=\"MathJax-Span-831\"><span id=\"MathJax-Span-832\">m</span><span id=\"MathJax-Span-833\"><span id=\"MathJax-Span-834\"><span id=\"MathJax-Span-835\"><span id=\"MathJax-Span-836\">c</span><span id=\"MathJax-Span-837\">2</span></span></span></span></span><span id=\"MathJax-Span-838\">)</span><span id=\"MathJax-Span-839\">×</span><span id=\"MathJax-Span-840\">T</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>T</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn><mo>−</mo><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow></msub><mo stretchy=\"false\">)</mo><mo>×</mo><mi>T</mi></math></span></span></p><p>最终，我们得到两个不等式：</p><p><span id=\"MathJax-Element-60-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-841\"><span id=\"MathJax-Span-842\"><span id=\"MathJax-Span-843\"><span id=\"MathJax-Span-844\">m</span><span id=\"MathJax-Span-845\"><span id=\"MathJax-Span-846\"><span id=\"MathJax-Span-847\"><span id=\"MathJax-Span-848\">b</span><span id=\"MathJax-Span-849\">2</span></span></span></span></span><span id=\"MathJax-Span-850\">−</span><span id=\"MathJax-Span-851\">b</span><span id=\"MathJax-Span-852\">&gt;</span><span id=\"MathJax-Span-853\"><span id=\"MathJax-Span-854\">m</span><span id=\"MathJax-Span-855\">T</span></span><span id=\"MathJax-Span-856\">−</span><span id=\"MathJax-Span-857\">1</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow></msub><mo>−</mo><mi>b</mi><mo>&gt;</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn></math></span></span>&nbsp;<br><span id=\"MathJax-Element-61-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-858\"><span id=\"MathJax-Span-859\"><span id=\"MathJax-Span-860\"><span id=\"MathJax-Span-861\">m</span><span id=\"MathJax-Span-862\"><span id=\"MathJax-Span-863\"><span id=\"MathJax-Span-864\"><span id=\"MathJax-Span-865\">c</span><span id=\"MathJax-Span-866\">2</span></span></span></span></span><span id=\"MathJax-Span-867\">−</span><span id=\"MathJax-Span-868\">c</span><span id=\"MathJax-Span-869\">&gt;</span><span id=\"MathJax-Span-870\"><span id=\"MathJax-Span-871\">m</span><span id=\"MathJax-Span-872\">T</span></span><span id=\"MathJax-Span-873\">−</span><span id=\"MathJax-Span-874\">1</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow></msub><mo>−</mo><mi>c</mi><mo>&gt;</mo><msub><mi>m</mi><mi>T</mi></msub><mo>−</mo><mn>1</mn></math></span></span></p><p>由于我们是在第<span id=\"MathJax-Element-62-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-875\"><span id=\"MathJax-Span-876\"><span id=\"MathJax-Span-877\">T</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>T</mi></math></span></span>次取的第<span id=\"MathJax-Element-63-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-878\"><span id=\"MathJax-Span-879\"><span id=\"MathJax-Span-880\">a</span><span id=\"MathJax-Span-881\">+</span><span id=\"MathJax-Span-882\">1</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi><mo>+</mo><mn>1</mn></math></span></span>个权值为<span id=\"MathJax-Element-64-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-883\"><span id=\"MathJax-Span-884\"><span id=\"MathJax-Span-885\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>的元素<span id=\"MathJax-Element-65-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-886\"><span id=\"MathJax-Span-887\"><span id=\"MathJax-Span-888\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>，所以这里的<span id=\"MathJax-Element-66-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-889\"><span id=\"MathJax-Span-890\"><span id=\"MathJax-Span-891\">m</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>m</mi></math></span></span>等于<span id=\"MathJax-Element-67-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-892\"><span id=\"MathJax-Span-893\"><span id=\"MathJax-Span-894\">1</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>1</mn></math></span></span>，则有：</p><p><span id=\"MathJax-Element-68-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-895\"><span id=\"MathJax-Span-896\"><span id=\"MathJax-Span-897\"><span id=\"MathJax-Span-898\">m</span><span id=\"MathJax-Span-899\"><span id=\"MathJax-Span-900\"><span id=\"MathJax-Span-901\"><span id=\"MathJax-Span-902\">b</span><span id=\"MathJax-Span-903\">2</span></span></span></span></span><span id=\"MathJax-Span-904\">−</span><span id=\"MathJax-Span-905\">b</span><span id=\"MathJax-Span-906\">&gt;</span><span id=\"MathJax-Span-907\">0</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>m</mi><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow></msub><mo>−</mo><mi>b</mi><mo>&gt;</mo><mn>0</mn></math></span></span>&nbsp;<br><span id=\"MathJax-Element-69-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-908\"><span id=\"MathJax-Span-909\"><span id=\"MathJax-Span-910\"><span id=\"MathJax-Span-911\">m</span><span id=\"MathJax-Span-912\"><span id=\"MathJax-Span-913\"><span id=\"MathJax-Span-914\"><span id=\"MathJax-Span-915\">c</span><span id=\"MathJax-Span-916\">2</span></span></span></span></span><span id=\"MathJax-Span-917\">−</span><span id=\"MathJax-Span-918\">c</span><span id=\"MathJax-Span-919\">&gt;</span><span id=\"MathJax-Span-920\">0</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>m</mi><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow></msub><mo>−</mo><mi>c</mi><mo>&gt;</mo><mn>0</mn></math></span></span></p><p>现在谜底要揭开了！由于我们假设在集合<span id=\"MathJax-Element-70-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-921\"><span id=\"MathJax-Span-922\"><span id=\"MathJax-Span-923\">{</span><span id=\"MathJax-Span-924\">A</span><span id=\"MathJax-Span-925\">:</span><span id=\"MathJax-Span-926\">a</span><span id=\"MathJax-Span-927\">,</span><span id=\"MathJax-Span-928\">B</span><span id=\"MathJax-Span-929\">:</span><span id=\"MathJax-Span-930\">b</span><span id=\"MathJax-Span-931\">,</span><span id=\"MathJax-Span-932\">C</span><span id=\"MathJax-Span-933\">:</span><span id=\"MathJax-Span-934\">c</span><span id=\"MathJax-Span-935\">}</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo fence=\"false\" stretchy=\"false\">{</mo><mi>A</mi><mo>:</mo><mi>a</mi><mo>,</mo><mi>B</mi><mo>:</mo><mi>b</mi><mo>,</mo><mi>C</mi><mo>:</mo><mi>c</mi><mo fence=\"false\" stretchy=\"false\">}</mo></math></span></span>取完<span id=\"MathJax-Element-71-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-936\"><span id=\"MathJax-Span-937\"><span id=\"MathJax-Span-938\">a</span><span id=\"MathJax-Span-939\">+</span><span id=\"MathJax-Span-940\">b</span><span id=\"MathJax-Span-941\">+</span><span id=\"MathJax-Span-942\">c</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></math></span></span>个元素之后，权值为<span id=\"MathJax-Element-72-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-943\"><span id=\"MathJax-Span-944\"><span id=\"MathJax-Span-945\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>的元素<span id=\"MathJax-Element-73-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-946\"><span id=\"MathJax-Span-947\"><span id=\"MathJax-Span-948\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>的取量多于<span id=\"MathJax-Element-74-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-949\"><span id=\"MathJax-Span-950\"><span id=\"MathJax-Span-951\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>个，那么权值为<span id=\"MathJax-Element-75-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-952\"><span id=\"MathJax-Span-953\"><span id=\"MathJax-Span-954\">b</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>b</mi></math></span></span>和<span id=\"MathJax-Element-76-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-955\"><span id=\"MathJax-Span-956\"><span id=\"MathJax-Span-957\">c</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>c</mi></math></span></span>的元素<span id=\"MathJax-Element-77-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-958\"><span id=\"MathJax-Span-959\"><span id=\"MathJax-Span-960\">B</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>B</mi></math></span></span>和<span id=\"MathJax-Element-78-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-961\"><span id=\"MathJax-Span-962\"><span id=\"MathJax-Span-963\">C</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>C</mi></math></span></span>取量必然至少有一个要少于自己权重数值，而上面的不等式表明，若需要满足<strong><em><u>权值为<span id=\"MathJax-Element-79-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-964\"><span id=\"MathJax-Span-965\"><span id=\"MathJax-Span-966\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>的元素<span id=\"MathJax-Element-80-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-967\"><span id=\"MathJax-Span-968\"><span id=\"MathJax-Span-969\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>的取量多于<span id=\"MathJax-Element-81-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-970\"><span id=\"MathJax-Span-971\"><span id=\"MathJax-Span-972\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>个</u></em></strong>，权值为<span id=\"MathJax-Element-82-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-973\"><span id=\"MathJax-Span-974\"><span id=\"MathJax-Span-975\">b</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>b</mi></math></span></span>和<span id=\"MathJax-Element-83-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-976\"><span id=\"MathJax-Span-977\"><span id=\"MathJax-Span-978\">c</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>c</mi></math></span></span>的元素<span id=\"MathJax-Element-84-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-979\"><span id=\"MathJax-Span-980\"><span id=\"MathJax-Span-981\">B</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>B</mi></math></span></span>和<span id=\"MathJax-Element-85-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-982\"><span id=\"MathJax-Span-983\"><span id=\"MathJax-Span-984\">C</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>C</mi></math></span></span>取量也必须同时多于它们的权值！这显然最终会造成一个矛盾：</p><p><span id=\"MathJax-Element-86-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-985\"><span id=\"MathJax-Span-986\"><span id=\"MathJax-Span-987\"><span id=\"MathJax-Span-988\">m</span><span id=\"MathJax-Span-989\">a</span></span><span id=\"MathJax-Span-990\">+</span><span id=\"MathJax-Span-991\"><span id=\"MathJax-Span-992\">m</span><span id=\"MathJax-Span-993\">b</span></span><span id=\"MathJax-Span-994\">+</span><span id=\"MathJax-Span-995\"><span id=\"MathJax-Span-996\">m</span><span id=\"MathJax-Span-997\">c</span></span><span id=\"MathJax-Span-998\">&gt;</span><span id=\"MathJax-Span-999\">a</span><span id=\"MathJax-Span-1000\">+</span><span id=\"MathJax-Span-1001\">b</span><span id=\"MathJax-Span-1002\">+</span><span id=\"MathJax-Span-1003\">c</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>m</mi><mi>a</mi></msub><mo>+</mo><msub><mi>m</mi><mi>b</mi></msub><mo>+</mo><msub><mi>m</mi><mi>c</mi></msub><mo>&gt;</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></math></span></span></p><p>因此，假设是错误的！即：</p><p><font size=\"4\"><strong><em>权值为<span id=\"MathJax-Element-87-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1004\"><span id=\"MathJax-Span-1005\"><span id=\"MathJax-Span-1006\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>的元素<span id=\"MathJax-Element-88-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1007\"><span id=\"MathJax-Span-1008\"><span id=\"MathJax-Span-1009\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>在一轮轮询之后的取量不可能多于<span id=\"MathJax-Element-89-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1010\"><span id=\"MathJax-Span-1011\"><span id=\"MathJax-Span-1012\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>个</em></strong></font></p><p>那么，能不能少于<span id=\"MathJax-Element-90-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1013\"><span id=\"MathJax-Span-1014\"><span id=\"MathJax-Span-1015\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>个呢？这个问题很简单！既然<span id=\"MathJax-Element-91-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1016\"><span id=\"MathJax-Span-1017\"><span id=\"MathJax-Span-1018\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>元素少于<span id=\"MathJax-Element-92-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1019\"><span id=\"MathJax-Span-1020\"><span id=\"MathJax-Span-1021\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>个，那么在总量<span id=\"MathJax-Element-93-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1022\"><span id=\"MathJax-Span-1023\"><span id=\"MathJax-Span-1024\">a</span><span id=\"MathJax-Span-1025\">+</span><span id=\"MathJax-Span-1026\">b</span><span id=\"MathJax-Span-1027\">+</span><span id=\"MathJax-Span-1028\">c</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></math></span></span>一定的情况下，一定有别的元素的取量多于自己的权值，因此问题还是会转化为上面我们反证的问题，这实际上是同一个问题！</p><hr><p>好了，本节我们证明了Nginx里面的这个WRR算法是正确的，即<strong><em>通过算法指示的操作，算法轮询结束后，会<u>严格</u>按照元素的权值比例分配被轮询的次数</em></strong>。</p><h2 id=\"为什么比ipvs的wrr要好\"><a name=\"t8\"></a>为什么比IPVS的WRR要好？</h2><p>这个问题其实很难回答，因为很难有一个确定的标准。我咨询过很多大师大神，得到的答案几乎都是从概率，global state的变更频率以及最大熵的角度来分析，然而这些对于回到这个问题有点复杂了。因为我知道Nginx的WRR算法也远不是最好的，其序列分布也不满足最大熵…</p><p>  所以，我把问题化简，我只要能求出一个权值最大的元素在序列一开始时连续分布的最大上界就基本OK了，如果我求出的这个上界小于其权值<span id=\"MathJax-Element-94-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1029\"><span id=\"MathJax-Span-1030\"><span id=\"MathJax-Span-1031\"><span id=\"MathJax-Span-1032\">W</span><span id=\"MathJax-Span-1033\">i</span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mi>i</mi></msub></math></span></span>，那就可以说明不可能所有的最大权值的元素完全连续分布，但确实要连续分布一点点，这便<strong><em>打散了整个分布</em></strong>，这已经比IPVS的WRR算法最终的序列分布要好了。</p><p>  现在让我们开始。</p><hr><p>假设元素<span id=\"MathJax-Element-95-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1034\"><span id=\"MathJax-Span-1035\"><span id=\"MathJax-Span-1036\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>的权值最大，为<span id=\"MathJax-Element-96-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1037\"><span id=\"MathJax-Span-1038\"><span id=\"MathJax-Span-1039\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>，设其连续分布<span id=\"MathJax-Element-97-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1040\"><span id=\"MathJax-Span-1041\"><span id=\"MathJax-Span-1042\">x</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>x</mi></math></span></span>次，则有：</p><p><span id=\"MathJax-Element-98-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1043\"><span id=\"MathJax-Span-1044\"><span id=\"MathJax-Span-1045\">x</span><span id=\"MathJax-Span-1046\">×</span><span id=\"MathJax-Span-1047\">a</span><span id=\"MathJax-Span-1048\">−</span><span id=\"MathJax-Span-1049\">(</span><span id=\"MathJax-Span-1050\">x</span><span id=\"MathJax-Span-1051\">−</span><span id=\"MathJax-Span-1052\">1</span><span id=\"MathJax-Span-1053\">)</span><span id=\"MathJax-Span-1054\">(</span><span id=\"MathJax-Span-1055\">a</span><span id=\"MathJax-Span-1056\">+</span><span id=\"MathJax-Span-1057\">b</span><span id=\"MathJax-Span-1058\">+</span><span id=\"MathJax-Span-1059\">c</span><span id=\"MathJax-Span-1060\">)</span><span id=\"MathJax-Span-1061\">&gt;</span><span id=\"MathJax-Span-1062\">0</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>x</mi><mo>×</mo><mi>a</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mn>0</mn></math></span></span></p><p>上面式子的含义是，选最后一次<span id=\"MathJax-Element-99-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1063\"><span id=\"MathJax-Span-1064\"><span id=\"MathJax-Span-1065\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>的时候，其配额依然是正的。现在化简：</p><p><font size=\"4\"><span id=\"MathJax-Element-100-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1066\"><span id=\"MathJax-Span-1067\"><span id=\"MathJax-Span-1068\">x</span><span id=\"MathJax-Span-1069\">&lt;</span><span id=\"MathJax-Span-1070\"><span id=\"MathJax-Span-1071\"><span id=\"MathJax-Span-1072\"><span id=\"MathJax-Span-1073\"><span id=\"MathJax-Span-1074\">a</span><span id=\"MathJax-Span-1075\">+</span><span id=\"MathJax-Span-1076\">b</span><span id=\"MathJax-Span-1077\">+</span><span id=\"MathJax-Span-1078\">c</span></span><span id=\"MathJax-Span-1079\"><span id=\"MathJax-Span-1080\">b</span><span id=\"MathJax-Span-1081\">+</span><span id=\"MathJax-Span-1082\">c</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>x</mi><mo>&lt;</mo><mstyle display=\"\" scriptlevel=\"0\"><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mfrac></mstyle></math></span></span></font></p><p>这就是上界！</p><p>  好吧，我现在用一个更加极端的例子来展示一下：</p><pre name=\"code\"><code>root@debian:/home/zhaoya# ./a.out 2 18 1\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 1\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18\n[LAST]: 18</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li></ul></pre><p>很显然，<span id=\"MathJax-Element-101-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1083\"><span id=\"MathJax-Span-1084\"><span id=\"MathJax-Span-1085\">18</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>18</mn></math></span></span>连续了<span id=\"MathJax-Element-102-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1086\"><span id=\"MathJax-Span-1087\"><span id=\"MathJax-Span-1088\">9</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mn>9</mn></math></span></span>次，按照上界公式算出来18连续分布应该不超过19次，显然9没有超过19，这是正确的。那么如何解释中间插入的那个1呢？显然，这就是算法的精妙之所在。</p><p>  按照算法描述，每选中一个最大值<span id=\"MathJax-Element-103-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1089\"><span id=\"MathJax-Span-1090\"><span id=\"MathJax-Span-1091\"><span id=\"MathJax-Span-1092\">W</span><span id=\"MathJax-Span-1093\"><span id=\"MathJax-Span-1094\"><span id=\"MathJax-Span-1095\">c</span><span id=\"MathJax-Span-1096\">u</span><span id=\"MathJax-Span-1097\">r</span><span id=\"MathJax-Span-1098\"><span id=\"MathJax-Span-1099\">r</span><span id=\"MathJax-Span-1100\">i</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub></math></span></span>元素，其<span id=\"MathJax-Element-104-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1101\"><span id=\"MathJax-Span-1102\"><span id=\"MathJax-Span-1103\"><span id=\"MathJax-Span-1104\">W</span><span id=\"MathJax-Span-1105\"><span id=\"MathJax-Span-1106\"><span id=\"MathJax-Span-1107\">c</span><span id=\"MathJax-Span-1108\">u</span><span id=\"MathJax-Span-1109\">r</span><span id=\"MathJax-Span-1110\"><span id=\"MathJax-Span-1111\">r</span><span id=\"MathJax-Span-1112\">i</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub></math></span></span>便需要减去配额<span id=\"MathJax-Element-105-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1113\"><span id=\"MathJax-Span-1114\"><span id=\"MathJax-Span-1115\">(</span><span id=\"MathJax-Span-1116\">a</span><span id=\"MathJax-Span-1117\">+</span><span id=\"MathJax-Span-1118\">b</span><span id=\"MathJax-Span-1119\">+</span><span id=\"MathJax-Span-1120\">c</span><span id=\"MathJax-Span-1121\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo></math></span></span>，与此同时，其它落选的元素其<span id=\"MathJax-Element-106-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1122\"><span id=\"MathJax-Span-1123\"><span id=\"MathJax-Span-1124\"><span id=\"MathJax-Span-1125\">W</span><span id=\"MathJax-Span-1126\"><span id=\"MathJax-Span-1127\"><span id=\"MathJax-Span-1128\">c</span><span id=\"MathJax-Span-1129\">u</span><span id=\"MathJax-Span-1130\">r</span><span id=\"MathJax-Span-1131\"><span id=\"MathJax-Span-1132\">r</span><span id=\"MathJax-Span-1133\">i</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub></math></span></span>是单调递增的，这是一个<strong><em>小学四年级就学过的<u>相遇问题</u></em></strong>，这从根本上阻止了任意元素的连续分布！</p><p>  依然以3个元素的集合为例，假设元素<span id=\"MathJax-Element-107-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1134\"><span id=\"MathJax-Span-1135\"><span id=\"MathJax-Span-1136\">A</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>A</mi></math></span></span>的权值最大，为<span id=\"MathJax-Element-108-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1137\"><span id=\"MathJax-Span-1138\"><span id=\"MathJax-Span-1139\">a</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi></math></span></span>，元素<span id=\"MathJax-Element-109-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1140\"><span id=\"MathJax-Span-1141\"><span id=\"MathJax-Span-1142\">B</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>B</mi></math></span></span>的权值次大(<u>我们需要次大的元素与最大的元素的<span id=\"MathJax-Element-110-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1143\"><span id=\"MathJax-Span-1144\"><span id=\"MathJax-Span-1145\"><span id=\"MathJax-Span-1146\">W</span><span id=\"MathJax-Span-1147\"><span id=\"MathJax-Span-1148\"><span id=\"MathJax-Span-1149\">c</span><span id=\"MathJax-Span-1150\">u</span><span id=\"MathJax-Span-1151\">r</span><span id=\"MathJax-Span-1152\"><span id=\"MathJax-Span-1153\">r</span><span id=\"MathJax-Span-1154\">i</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><msub><mi>W</mi><mrow><mi>c</mi><mi>u</mi><mi>r</mi><msub><mi>r</mi><mi>i</mi></msub></mrow></msub></math></span></span>相遇</u>)，为<span id=\"MathJax-Element-111-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1155\"><span id=\"MathJax-Span-1156\"><span id=\"MathJax-Span-1157\">b</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>b</mi></math></span></span>，按照相遇问题的解法，我们有：</p><p><span id=\"MathJax-Element-112-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1158\"><span id=\"MathJax-Span-1159\"><span id=\"MathJax-Span-1160\">a</span><span id=\"MathJax-Span-1161\">−</span><span id=\"MathJax-Span-1162\">x</span><span id=\"MathJax-Span-1163\">×</span><span id=\"MathJax-Span-1164\">(</span><span id=\"MathJax-Span-1165\">b</span><span id=\"MathJax-Span-1166\">+</span><span id=\"MathJax-Span-1167\">c</span><span id=\"MathJax-Span-1168\">)</span><span id=\"MathJax-Span-1169\">=</span><span id=\"MathJax-Span-1170\">x</span><span id=\"MathJax-Span-1171\">×</span><span id=\"MathJax-Span-1172\">b</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>a</mi><mo>−</mo><mi>x</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>×</mo><mi>b</mi></math></span></span></p><p>化简为：</p><p><span id=\"MathJax-Element-113-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1173\"><span id=\"MathJax-Span-1174\"><span id=\"MathJax-Span-1175\">x</span><span id=\"MathJax-Span-1176\">=</span><span id=\"MathJax-Span-1177\"><span id=\"MathJax-Span-1178\"><span id=\"MathJax-Span-1179\"><span id=\"MathJax-Span-1180\">a</span><span id=\"MathJax-Span-1181\"><span id=\"MathJax-Span-1182\">2</span><span id=\"MathJax-Span-1183\">b</span><span id=\"MathJax-Span-1184\">+</span><span id=\"MathJax-Span-1185\">c</span></span></span></span></span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>x</mi><mo>=</mo><mstyle display=\"\" scriptlevel=\"0\"><mfrac><mi>a</mi><mrow><mn>2</mn><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mfrac></mstyle></math></span></span></p><p>在下面的例子中代入上式：</p><pre name=\"code\"><code>root@debian:/home/zhaoya# ./a.out 2 18 1</code><ul><li>1</li></ul></pre><p>我们得到<span id=\"MathJax-Element-114-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1186\"><span id=\"MathJax-Span-1187\"><span id=\"MathJax-Span-1188\">x</span><span id=\"MathJax-Span-1189\">=</span><span id=\"MathJax-Span-1190\">9</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>x</mi><mo>=</mo><mn>9</mn></math></span></span>。</p><p>  当然，在这里我有意把问题简化了，因此这不是一个普通的相遇问题，因此上面式子中的等号<span id=\"MathJax-Element-115-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1191\"><span id=\"MathJax-Span-1192\"><span id=\"MathJax-Span-1193\">=</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>=</mo></math></span></span>是不恰当的，但无论如何，我展示了一个极端情况下Nginx WRR算法的表现。</p><h1 id=\"算法的on问题\"><a name=\"t9\"></a>算法的O(n)问题</h1><p>很多人对本文中所描述的两种WRR算法并不是很满意，因为在寻找next元素的时候，其时间复杂度是<span id=\"MathJax-Element-116-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1194\"><span id=\"MathJax-Span-1195\"><span id=\"MathJax-Span-1196\">O</span><span id=\"MathJax-Span-1197\">(</span><span id=\"MathJax-Span-1198\">n</span><span id=\"MathJax-Span-1199\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>的，人们一般很讨厌看到这个<span id=\"MathJax-Element-117-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1200\"><span id=\"MathJax-Span-1201\"><span id=\"MathJax-Span-1202\">O</span><span id=\"MathJax-Span-1203\">(</span><span id=\"MathJax-Span-1204\">n</span><span id=\"MathJax-Span-1205\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>！</p><p>  但是实际上，这并无所谓，虽然是<span id=\"MathJax-Element-118-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1206\"><span id=\"MathJax-Span-1207\"><span id=\"MathJax-Span-1208\">O</span><span id=\"MathJax-Span-1209\">(</span><span id=\"MathJax-Span-1210\">n</span><span id=\"MathJax-Span-1211\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>，但是还有一件利器，即cache的思路，或者说网络上<strong><em>转控分离</em></strong>思路来解决这个<span id=\"MathJax-Element-119-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1212\"><span id=\"MathJax-Span-1213\"><span id=\"MathJax-Span-1214\">O</span><span id=\"MathJax-Span-1215\">(</span><span id=\"MathJax-Span-1216\">n</span><span id=\"MathJax-Span-1217\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></math></span></span>的问题。</p><p>  在不考虑权值动态更新的前提下，事实上，给定一个集合，按照权值的WRR分布是一个固定的序列，我们不妨在第一次获取到这个序列的时候就将其保存起来，随便用什么基于定位而非查找的数据结构都可以，比如数组，bitmap这种，总之就是在后续的操作中，用<span id=\"MathJax-Element-120-Frame\" tabindex=\"0\" role=\"presentation\"><nobr aria-hidden=\"true\"><span id=\"MathJax-Span-1218\"><span id=\"MathJax-Span-1219\"><span id=\"MathJax-Span-1220\">O</span><span id=\"MathJax-Span-1221\">(</span><span id=\"MathJax-Span-1222\">1</span><span id=\"MathJax-Span-1223\">)</span></span></span></nobr><span role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></math></span></span>的时间复杂度来定位集合中的next元素！</p><p>  这类似将WRR做了一个预处理，事先生成了序列。</p><h1 id=\"cfsfqpq调度与wrr负载均衡\"><a name=\"t10\"></a>CFS/FQ/PQ调度与WRR负载均衡</h1><p>最后来比较一下WRR和FQ队列。</p><p>  FQ队列以及PQ队列以及队列领域的WRR算法注重于在时间上调度上的公平性，即完全按照其优先级权值来进行调度，谁的权值大，谁优先。</p><p>  而负载均衡中的WRR更多的是在空间上考虑公平性，在空间维度，打散结果是最好的方案。</p><p>  其实，我们也可以按照队列调度的思想来重新实现负载均衡的WRR算法，以下是一个简单的代码，参照Linux CFS调度器的原理：</p><pre name=\"code\"><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct entry {\n        int weight;\n        int curr_cfs;\n};\n\nstruct entry *curr_entry = NULL;\nstruct entry *g_entry = NULL;\n\n\nstruct entry *next_cfs(struct entry *entrys, int size)\n{\n        struct entry *ent;\n        int i = 0, total = 0;\n        for (i = 0; i &lt; size; i++) {\n                ent = &amp;entrys[i];\n                // 选择最小的curr_cfs\n                if (curr_entry == NULL || ent-&gt;curr_cfs &lt; curr_entry-&gt;curr_cfs) {\n                        curr_entry = ent;\n                }\n        }\n    // 满足“单位1”中有weight个元素，算法的结果才是正确的\n        curr_entry-&gt;curr_cfs += 100000000/(curr_entry-&gt;weight);\n        return curr_entry;\n}\n\n\nint main(int argc, char **argv)\n{\n        int size = atoi(argv[1]);\n        int i = 0;\n        int total = 0;\n\n        g_entry = (struct entry *)calloc(size, sizeof(struct entry));\n        for (i = 0; i &lt; size; i++) {\n                struct entry *ent = &amp;g_entry[i];\n                ent-&gt;weight = atoi(argv[i+2]);\n                ent-&gt;curr_cfs = 100000000/ent-&gt;weight;\n                total += ent-&gt;weight;\n        }\n\n\n        for (i = 0; i &lt; total; i++) {\n                struct entry *ent = next_cfs(g_entry, size);\n                printf(\"[LAST_CFS]: %d\\n\", ent-&gt;weight);\n        }\n\n}</code><ul><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li>49</li><li>50</li></ul></pre><p>你可以试一下结果。你会发现，所有权值一样的元素完全挤在一起了，这非常符合在时间序列上的公平性表现(<u>大体上，进程调度和数据包调度都是如此表现</u>)，但是在空间维度上却非常差劲。</p>', NULL, 40, 0, '2018-04-30 08:50:20', '2018-04-30 08:50:20');

-- --------------------------------------------------------

--
-- 表的结构 `categorys`
--

DROP TABLE IF EXISTS `categorys`;
CREATE TABLE IF NOT EXISTS `categorys` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `categorys`
--

INSERT INTO `categorys` (`id`, `name`) VALUES
(1, 'PHP'),
(2, 'Javascript'),
(3, '??3'),
(4, '??4'),
(5, '??');

-- --------------------------------------------------------

--
-- 表的结构 `comments`
--

DROP TABLE IF EXISTS `comments`;
CREATE TABLE IF NOT EXISTS `comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) DEFAULT NULL,
  `content` text COMMENT '评论内容',
  `user_id` int(11) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `comments`
--

INSERT INTO `comments` (`id`, `article_id`, `content`, `user_id`, `created_at`, `updated_at`) VALUES
(1, 1, '233', 33, '2018-04-13 00:00:00', '2018-04-20 16:00:00'),
(2, 18, '欢迎大家点评一下哦', 33, '2018-04-20 22:48:06', '2018-04-20 14:48:06'),
(3, 19, '写的不错', 27, '2018-04-22 09:31:25', '2018-04-22 01:31:25'),
(4, 19, '333', 27, '2018-04-22 09:31:28', '2018-04-22 01:31:28'),
(5, 19, '可以可以', 27, '2018-04-22 09:31:42', '2018-04-22 01:31:42'),
(6, 18, '你个二傻子', 27, '2018-04-22 10:51:05', '2018-04-22 02:51:05'),
(7, 18, '33', 27, '2018-04-22 10:53:11', '2018-04-22 02:53:11');

-- --------------------------------------------------------

--
-- 表的结构 `friends`
--

DROP TABLE IF EXISTS `friends`;
CREATE TABLE IF NOT EXISTS `friends` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `friend_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `friends`
--

INSERT INTO `friends` (`id`, `user_id`, `friend_id`) VALUES
(1, 27, 335),
(2, 27, 331),
(3, 27, 33);

-- --------------------------------------------------------

--
-- 表的结构 `users`
--

DROP TABLE IF EXISTS `users`;
CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `username` varchar(40) DEFAULT NULL,
  `password` varchar(40) DEFAULT NULL,
  `nickname` varchar(20) DEFAULT NULL COMMENT '昵称',
  `email` varchar(30) DEFAULT NULL,
  `phone` int(11) DEFAULT NULL COMMENT '电话号码',
  `qq` int(20) DEFAULT NULL,
  `open_id` int(255) DEFAULT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `power` int(2) DEFAULT '1' COMMENT '权限:1普通 2管理员',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=58 DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `users`
--

INSERT INTO `users` (`id`, `username`, `password`, `nickname`, `email`, `phone`, `qq`, `open_id`, `avatar`, `power`, `created_at`, `updated_at`) VALUES
(27, '2045636756@qq.com', '33333', '大傻子2', NULL, NULL, NULL, NULL, 'http://game.xyz/images/image/YfeOqHFHD8.png', 1, '2018-04-01 03:55:05', '2018-04-22 13:09:07'),
(33, '2053510887@qq.com', '11111', '二傻子', NULL, NULL, NULL, NULL, 'https://lccdn.phphub.org/uploads/avatars/21030_1515634349.jpg?imageView2/1/w/100/h/100', 1, '2018-04-08 06:23:24', '2018-04-08 06:23:24'),
(34, '111', '222', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(35, '1', '2', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(36, '1', '1', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(37, '1', '1', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(38, '1', '1', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(39, '123', '1', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(40, '1233213', '1', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(41, '1', '312', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(42, '123122', '312', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(43, '123112313', '312', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(44, '1', '1', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(45, '122', '22', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(46, 'a啊水水', '22a', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(47, '23333', '23333', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(48, '2333333', '2333333', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(49, '111222', '22', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(50, '23333332', '2333333', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(51, '1233', '333', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL),
(52, '123333', '222', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
